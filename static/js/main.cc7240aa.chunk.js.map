{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Spotify.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","search","bind","assertThisInitialized","handleTermChange","onSearch","event","setState","target","value","react_default","a","createElement","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","Components_Track_Track","key","id","SearchResults","Components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","_this2","_this3","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","Components_App_App"],"mappings":"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","file":"static/js/main.cc7240aa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: ''\r\n        }\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({ term: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from \"react\";\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;","import React from \"react\";\r\nimport './TrackList.css';\r\nimport Track from \"../Track/Track\";\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track track={track}\r\n                        key={track.id} \r\n                        onAdd={this.props.onAdd}\r\n                        onRemove={this.props.onRemove}\r\n                        isRemoval={this.props.isRemoval} />\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from \"react\";\r\nimport './SearchResults.css';\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults}\r\n                onAdd={this.props.onAdd}\r\n                isRemoval={false} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from \"react\";\r\nimport './Playlist.css';\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Playlist\">\r\n                <input \r\n                defaultValue={\"New Playlist\"}\r\n                onChange={this.handleNameChange}\r\n                />\r\n                 <TrackList \r\n                 tracks={this.props.playlistTracks}\r\n                 onAdd={this.props.onAdd}\r\n                 onRemove={this.props.onRemove}\r\n                 isRemoval={true}\r\n                 />\r\n                 <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","\r\nconst clientId = 'f5f0b537aedf42a8bd99867c7bdfc821';\r\nconst redirectUri = \"http://localhost:3000\";\r\n\r\nlet accessToken = '';\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if(accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    // check for access token match\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      // This clears the parameters, allowing us to grab a new access token when it expires.\r\n      window.setTimeout(() => accessToken = '', expiresIn *1000);\r\n      window.history.pushState('Access Token', null, '/');\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, { \r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if (!jsonResponse.tracks) {\r\n        return [];\r\n      }\r\n      return jsonResponse.tracks.items.map(track => ({\r\n        id: track.id,\r\n        name: track.name,\r\n        artist: track.artists[0].name,\r\n        album: track.album.name,\r\n        uri: track.uri\r\n      }))\r\n    })\r\n  },\r\n\r\n  savePlaylist(name, trackUris) {\r\n    if (!name || !trackUris.length) {\r\n      return;\r\n    }\r\n\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = {Authorization: `Bearer ${accessToken}`};\r\n    let userId;\r\n\r\n    return fetch('https://api.spotify.com/v1/me', {\r\n      headers: headers\r\n    }).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n      userId = jsonResponse.id;\r\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n        {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({ name: name })\r\n        }).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n          const playlistId = jsonResponse.id;\r\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n            headers: headers,\r\n            method: 'POST',\r\n            body: JSON.stringify({ uris: trackUris })\r\n          });\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './App.css';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport Playlist from '../Playlist/Playlist';\r\nimport Spotify from '../../util/Spotify';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchResults: [],\r\n            playlistName: 'My Playlist',\r\n            playlistTracks: []\r\n        };\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n        this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n        this.savePlaylist = this.savePlaylist.bind(this);\r\n        this.search = this.search.bind(this);\r\n    }\r\n\r\n    addTrack(track) {\r\n        let tracks = this.state.playlistTracks;\r\n        if (tracks.find(savedTrack => savedTrack.id === track.id)) {\r\n            return;\r\n        }\r\n        tracks.push(track);\r\n        this.setState({playlistTracks: tracks});\r\n    }\r\n\r\n    removeTrack(track) {\r\n        let tracks = this.state.playlistTracks;\r\n        tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\r\n        this.setState({playlistTracks: tracks});\r\n    }\r\n\r\n    updatePlaylistName(name) {\r\n        this.setState({playlistName: name});\r\n    }\r\n\r\n    savePlaylist() {\r\n        const trackUris = this.state.playlistTracks.map(track => track.uri);\r\n        Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\r\n            this.setState({\r\n                playlistName: 'New Playlist',\r\n                playlistTracks: []\r\n            })\r\n        })\r\n    }\r\n\r\n    search(term) {\r\n        Spotify.search(term).then(searchResults => {\r\n            this.setState({searchResults: searchResults})\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n                <div className=\"App\">\r\n                     <SearchBar onSearch={this.search} />\r\n                     <div className=\"App-playlist\">\r\n                        <SearchResults searchResults={this.state.searchResults} \r\n                        onAdd={this.addTrack} />\r\n                            <Playlist playlistName={this.state.playlistName}\r\n                            playlistTracks={this.state.playlistTracks}\r\n                            onRemove={this.removeTrack}\r\n                            onNameChange={this.updatePlaylistName}\r\n                            onSave={this.savePlaylist} />\r\n                         </div>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './Components/App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}